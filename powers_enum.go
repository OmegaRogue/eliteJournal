// Code generated by go-enum
// DO NOT EDIT!

package elite

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
)

const (
	// Uncontrolled is a Power of type Uncontrolled.
	Uncontrolled Power = iota
	// AislingDuval is a Power of type Aisling Duval.
	AislingDuval
	// ArchonDelaine is a Power of type Archon Delaine.
	ArchonDelaine
	// ArissaLavignyDuval is a Power of type Arissa Lavigny-Duval.
	ArissaLavignyDuval
	// DentonPatreus is a Power of type Denton Patreus.
	DentonPatreus
	// EdmundMahon is a Power of type Edmund Mahon.
	EdmundMahon
	// FeliciaWinters is a Power of type Felicia Winters.
	FeliciaWinters
	// LiYongRui is a Power of type Li Yong-Rui.
	LiYongRui
	// PranavAntal is a Power of type Pranav Antal.
	PranavAntal
	// YuriGrom is a Power of type Yuri Grom.
	YuriGrom
	// ZacharyHudson is a Power of type Zachary Hudson.
	ZacharyHudson
	// ZeminaTorval is a Power of type Zemina Torval.
	ZeminaTorval
)

const _PowerName = "UncontrolledAisling DuvalArchon DelaineArissa Lavigny-DuvalDenton PatreusEdmund MahonFelicia WintersLi Yong-RuiPranav AntalYuri GromZachary HudsonZemina Torval"

var _PowerMap = map[Power]string{
	0:  _PowerName[0:12],
	1:  _PowerName[12:25],
	2:  _PowerName[25:39],
	3:  _PowerName[39:59],
	4:  _PowerName[59:73],
	5:  _PowerName[73:85],
	6:  _PowerName[85:100],
	7:  _PowerName[100:111],
	8:  _PowerName[111:123],
	9:  _PowerName[123:132],
	10: _PowerName[132:146],
	11: _PowerName[146:159],
}

// String implements the Stringer interface.
func (x Power) String() string {
	if str, ok := _PowerMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Power(%d)", x)
}

var _PowerValue = map[string]Power{
	_PowerName[0:12]:    0,
	_PowerName[12:25]:   1,
	_PowerName[25:39]:   2,
	_PowerName[39:59]:   3,
	_PowerName[59:73]:   4,
	_PowerName[73:85]:   5,
	_PowerName[85:100]:  6,
	_PowerName[100:111]: 7,
	_PowerName[111:123]: 8,
	_PowerName[123:132]: 9,
	_PowerName[132:146]: 10,
	_PowerName[146:159]: 11,
}

// ParsePower attempts to convert a string to a Power
func ParsePower(name string) (Power, error) {
	if x, ok := _PowerValue[name]; ok {
		return x, nil
	}
	return Power(0), fmt.Errorf("%s is not a valid Power", name)
}

// MarshalText implements the text marshaller method
func (x Power) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Power) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePower(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _PowerErrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Power) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Power(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Power(v)
	case string:
		*x, err = ParsePower(v)
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(v); verr == nil {
				*x, err = Power(val), nil
			}
		}
	case []byte:
		*x, err = ParsePower(string(v))
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(string(v)); verr == nil {
				*x, err = Power(val), nil
			}
		}
	case Power:
		*x = v
	case int:
		*x = Power(v)
	case *Power:
		if v == nil {
			return _PowerErrNilPtr
		}
		*x = *v
	case uint:
		*x = Power(v)
	case uint64:
		*x = Power(v)
	case *int:
		if v == nil {
			return _PowerErrNilPtr
		}
		*x = Power(*v)
	case *int64:
		if v == nil {
			return _PowerErrNilPtr
		}
		*x = Power(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Power(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return _PowerErrNilPtr
		}
		*x = Power(*v)
	case *uint:
		if v == nil {
			return _PowerErrNilPtr
		}
		*x = Power(*v)
	case *uint64:
		if v == nil {
			return _PowerErrNilPtr
		}
		*x = Power(*v)
	case *string:
		if v == nil {
			return _PowerErrNilPtr
		}
		*x, err = ParsePower(*v)
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(*v); verr == nil {
				*x, err = Power(val), nil
			}
		}
	}

	return
}

// Value implements the driver Valuer interface.
func (x Power) Value() (driver.Value, error) {
	return int64(x), nil
}

type NullPower struct {
	Power Power
	Valid bool
	Set   bool
}

func NewNullPower(val interface{}) (x NullPower) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *NullPower) Scan(value interface{}) (err error) {
	x.Set = true
	if value == nil {
		x.Power, x.Valid = Power(0), false
		return
	}

	err = x.Power.Scan(value)
	x.Valid = err == nil
	return
}

// Value implements the driver Valuer interface.
func (x NullPower) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return int64(x.Power), nil
}

// MarshalJSON correctly serializes a NullPower to JSON.
func (n NullPower) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.Power)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullPower from JSON.
func (n *NullPower) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
