// Code generated by go-enum
// DO NOT EDIT!

package elite

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strconv"
)

const (
	// Independent is a Allegiance of type Independent.
	Independent Allegiance = iota
	// Alliance is a Allegiance of type Alliance.
	Alliance
	// Empire is a Allegiance of type Empire.
	Empire
	// Federation is a Allegiance of type Federation.
	Federation
	// Pirate is a Allegiance of type Pirate.
	Pirate
	// PilotsFederation is a Allegiance of type PilotsFederation.
	PilotsFederation
	// Thargoids is a Allegiance of type Thargoids.
	Thargoids
	// Guardians is a Allegiance of type Guardians.
	Guardians
)

const _AllegianceName = "IndependentAllianceEmpireFederationPiratePilotsFederationThargoidsGuardians"

var _AllegianceMap = map[Allegiance]string{
	0: _AllegianceName[0:11],
	1: _AllegianceName[11:19],
	2: _AllegianceName[19:25],
	3: _AllegianceName[25:35],
	4: _AllegianceName[35:41],
	5: _AllegianceName[41:57],
	6: _AllegianceName[57:66],
	7: _AllegianceName[66:75],
}

// String implements the Stringer interface.
func (x Allegiance) String() string {
	if str, ok := _AllegianceMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Allegiance(%d)", x)
}

var _AllegianceValue = map[string]Allegiance{
	_AllegianceName[0:11]:  0,
	_AllegianceName[11:19]: 1,
	_AllegianceName[19:25]: 2,
	_AllegianceName[25:35]: 3,
	_AllegianceName[35:41]: 4,
	_AllegianceName[41:57]: 5,
	_AllegianceName[57:66]: 6,
	_AllegianceName[66:75]: 7,
}

// ParseAllegiance attempts to convert a string to a Allegiance
func ParseAllegiance(name string) (Allegiance, error) {
	if x, ok := _AllegianceValue[name]; ok {
		return x, nil
	}
	return Allegiance(0), fmt.Errorf("%s is not a valid Allegiance", name)
}

// MarshalText implements the text marshaller method
func (x Allegiance) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Allegiance) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAllegiance(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _AllegianceErrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Allegiance) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Allegiance(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Allegiance(v)
	case string:
		*x, err = ParseAllegiance(v)
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(v); verr == nil {
				*x, err = Allegiance(val), nil
			}
		}
	case []byte:
		*x, err = ParseAllegiance(string(v))
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(string(v)); verr == nil {
				*x, err = Allegiance(val), nil
			}
		}
	case Allegiance:
		*x = v
	case int:
		*x = Allegiance(v)
	case *Allegiance:
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x = *v
	case uint:
		*x = Allegiance(v)
	case uint64:
		*x = Allegiance(v)
	case *int:
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x = Allegiance(*v)
	case *int64:
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x = Allegiance(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Allegiance(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x = Allegiance(*v)
	case *uint:
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x = Allegiance(*v)
	case *uint64:
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x = Allegiance(*v)
	case *string:
		if v == nil {
			return _AllegianceErrNilPtr
		}
		*x, err = ParseAllegiance(*v)
		if err != nil {
			// try parsing the integer value as a string
			if val, verr := strconv.Atoi(*v); verr == nil {
				*x, err = Allegiance(val), nil
			}
		}
	}

	return
}

// Value implements the driver Valuer interface.
func (x Allegiance) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullAllegiance struct {
	Allegiance Allegiance
	Valid      bool
	Set        bool
}

func NewNullAllegiance(val interface{}) (x NullAllegiance) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *NullAllegiance) Scan(value interface{}) (err error) {
	x.Set = true
	if value == nil {
		x.Allegiance, x.Valid = Allegiance(0), false
		return
	}

	err = x.Allegiance.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullAllegiance) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return int64(x.Allegiance), nil
}

// MarshalJSON correctly serializes a NullAllegiance to JSON.
func (n NullAllegiance) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.Allegiance)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullAllegiance from JSON.
func (n *NullAllegiance) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
